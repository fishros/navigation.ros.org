# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020
# This file is distributed under the same license as the Navigation 2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Navigation 2 latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-18 21:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"


#: ../../commander_api/index.rst:4
msgid "Simple Commander API"
msgstr "简单指挥官API"


#: ../../commander_api/index.rst:7
msgid "Overview"
msgstr "概述"


#: ../../commander_api/index.rst:9
msgid "The goal of the Nav2 Simple (Python3) Commander is to provide a \"navigation as a library\" capability to Python3 users. We provide an API that handles all the ROS 2 and Action Server tasks for you such that you can focus on building an application leveraging the capabilities of Nav2 (after you've configured it to your liking with your plugins of choice). `We also provide you with demos and examples of API usage <https://github.com/ros-planning/navigation2/tree/main/nav2_simple_commander>`_ to build common basic capabilities in autonomous mobile robotics in the ``nav2_simple_commander`` package."
msgstr "Nav2简单（Python3）指挥官的目标是为Python3用户提供“作为库的导航”能力。我们提供了一个处理ROS 2和动作服务器任务的API，以便您可以专注于构建应用程序，利用Nav2的功能（在您使用所选的插件进行配置后）。我们还为您提供了API用法的演示和示例，以构建自主移动机器人的常见基本功能，这些位于``nav2_simple_commander``软件包中。"


#: ../../commander_api/index.rst:11
msgid "A simple demonstration is shown below. Note: ``goToPose()``, ``goThroughPoses()``, ``followWaypoints()`` and similar are **non-blocking** such that you can receive and process feedback in a single-threaded application. As such while waiting for a task to be completed, the ``while not nav.isTaskComplete()`` design is necessary to poll for changes in the navigation completion, and if not complete some tasks of interest to your application (like processing feedback, doing something with the data the robot is collecting, or checking for faults)."
msgstr "下面是一个简单的演示。注意：``goToPose()``, ``goThroughPoses()``, ``followWaypoints()``等函数是**非阻塞**的，因此您可以在单线程应用程序中接收和处理反馈。因此，在等待任务完成时，使用``while not nav.isTaskComplete()``的设计来轮询导航完成情况的更改是必要的。如果任务没有完成，您可以执行一些对应用程序有意义的任务（例如处理反馈、处理机器人收集的数据或检查故障）。"


#: ../../commander_api/index.rst:13
msgid "You may use this simple commander preempt commands of the same type (e.g. you can preempt a ``goToPose()`` with another ``goToPose()``) but you must explicitly cancel a current command and issue a new one if switching between ``goToPose()``, ``goThroughPoses()``, or ``followWaypoints()``."
msgstr "您可以使用此简单指挥官来中断相同类型的命令（例如，您可以使用另一个``goToPose()``来中断``goToPose()``），但是如果在``goToPose()``、``goThroughPoses()``或``followWaypoints()``之间切换，您必须显式取消当前命令并发出新命令。"


#: ../../commander_api/index.rst:53
msgid "Commander API"
msgstr "指挥官 API"


#: ../../commander_api/index.rst:55
msgid "The methods provided by the basic navigator are shown below, with inputs and expected returns. If a server fails, it may throw an exception or return a `None` object, so please be sure to properly wrap your navigation calls in try/catch and check returns for `None` type."
msgstr "基本导航器提供的方法如下所示，包括输入和预期返回值。如果服务器出现故障，可能会抛出异常或返回`None`对象，请确保在try/catch中正确包装您的导航调用，并检查返回值的`None`类型。"


#: ../../commander_api/index.rst:59
msgid "Robot Navigator Method"
msgstr "机器人导航器方法"


#: ../../commander_api/index.rst:59 ../../commander_api/index.rst:140 ../../commander_api/index.rst:186
msgid "Description"
msgstr "描述"


#: ../../commander_api/index.rst:61
msgid "setInitialPose(initial_pose)"
msgstr "setInitialPose(initial_pose)"


#: ../../commander_api/index.rst:61
msgid "Sets the initial pose (``PoseStamped``) of the robot to localization."
msgstr "将机器人的初始姿态（``PoseStamped``）设置为本地化。"


#: ../../commander_api/index.rst:63
msgid "goThroughPoses(poses, behavior_tree='')"
msgstr "goThroughPoses(poses, behavior_tree='')"


#: ../../commander_api/index.rst:63
msgid "Requests the robot to drive through a set of poses (list of ``PoseStamped``)."
msgstr "请求机器人按顺序通过一组姿态（``PoseStamped``列表）。"


#: ../../commander_api/index.rst:66
msgid "goToPose(pose, behavior_tree='')"
msgstr "goToPose(pose, behavior_tree='')"


#: ../../commander_api/index.rst:66
msgid "Requests the robot to drive to a pose (``PoseStamped``)."
msgstr "请求机器人驶向一个姿态（``PoseStamped``）。"


#: ../../commander_api/index.rst:68
msgid "followWaypoints(poses)"
msgstr "followWaypoints(poses)"


#: ../../commander_api/index.rst:68
msgid "Requests the robot to follow a set of waypoints (list of ``PoseStamped``). This will execute the chosen ``TaskExecutor`` plugin at each pose."
msgstr "请求机器人按照一组路径点（``PoseStamped``的列表）行进。这将在每个姿态上执行选择的``TaskExecutor``插件。"


#: ../../commander_api/index.rst:71
msgid "followPath(path, controller_id='', goal_checker_id='')"
msgstr "followPath(path, controller_id='', goal_checker_id='')"


#: ../../commander_api/index.rst:71
msgid "Requests the robot to follow a path from a starting to a goal ``PoseStamped``, ``nav_msgs/Path``."
msgstr "请求机器人按照起始和目标``PoseStamped``（``nav_msgs/Path``）之间的路径行进。"


#: ../../commander_api/index.rst:74
msgid "spin(spin_dist=1.57, time_allowance=10)"
msgstr "spin(spin_dist=1.57, time_allowance=10)"


#: ../../commander_api/index.rst:74
msgid "Requests the robot to performs an in-place rotation by a given angle."
msgstr "请求机器人执行给定角度的就地旋转。"


#: ../../commander_api/index.rst:77
msgid "backup(backup_dist=0.15, backup_speed=0.025, time_allowance=10)"
msgstr "backup(backup_dist=0.15, backup_speed=0.025, time_allowance=10)"


#: ../../commander_api/index.rst:77
msgid "Requests the robot to back up by a given distance."
msgstr "请求机器人后退给定距离。"


#: ../../commander_api/index.rst:80
msgid "assistedTeleop(time_allowance=30)"
msgstr "assistedTeleop(time_allowance=30)"


#: ../../commander_api/index.rst:80
msgid "Requests the robot to run the assisted teleop action."
msgstr "请求机器人运行辅助遥控操作。"


#: ../../commander_api/index.rst:82
msgid "cancelTask()"
msgstr "cancelTask()"


#: ../../commander_api/index.rst:82
msgid "Cancel an ongoing task, including route tasks."
msgstr "取消正在进行的任务，包括路径跟踪任务。"


#: ../../commander_api/index.rst:84
msgid "isTaskComplete(trackingRoute=False)"
msgstr "isTaskComplete（trackingRoute=False）"


#: ../../commander_api/index.rst:84
msgid "Checks if task is complete yet, times out at ``100ms``. Returns ``True`` if completed and ``False`` if still going. If checking a route tracking task, set default argument to ``True``."
msgstr "检查任务是否已完成，超时时间为``100ms``。如果已完成则返回``True``，如果仍在进行则返回``False``。如果检查路径跟踪任务，请将默认参数设置为``True``。"


#: ../../commander_api/index.rst:88
msgid "getFeedback(trackingRoute=False)"
msgstr "getFeedback（trackingRoute=False）"


#: ../../commander_api/index.rst:88
msgid "Gets feedback from task, returns action server feedback msg. If getting feedback on a tracking task, set default argument to ``True``."
msgstr "从任务获取反馈，返回操作服务器的反馈消息。如果在跟踪任务中获取反馈，请将默认参数设置为 ``True``。"


#: ../../commander_api/index.rst:91
msgid "getResult()"
msgstr "getResult（）"


#: ../../commander_api/index.rst:91
msgid "Gets final result of task, to be called after ``isTaskComplete`` returns ``True``. Returns action server result msg."
msgstr "获取任务的最终结果，在 ``isTaskComplete`` 返回 ``True`` 后调用。返回操作服务器的结果消息。"


#: ../../commander_api/index.rst:94
msgid "getPath(start, goal, planner_id='', use_start=False)"
msgstr "getPath（start，goal，planner_id=''，use_start=False）"


#: ../../commander_api/index.rst:94
msgid "Gets a path from a starting to a goal ``PoseStamped``, ``nav_msgs/Path``."
msgstr "获取从起始点到目标点的路径，类型为 ``PoseStamped``，返回类型为 ``nav_msgs/Path``。"


#: ../../commander_api/index.rst:97
msgid "getPathThroughPoses(start, goals, planner_id='', use_start=False)"
msgstr "getPathThroughPoses（start，goals，planner_id=''，use_start=False）"


#: ../../commander_api/index.rst:97
msgid "Gets a path through a starting to a set of goals, a list of ``PoseStamped``, ``nav_msgs/Path``."
msgstr "获取从起始点到一组目标点的路径，类型为一组 ``PoseStamped``，返回类型为 ``nav_msgs/Path``。"


#: ../../commander_api/index.rst:100
msgid "getRoute(start, goal, use_start=False)"
msgstr "getRoute（start，goal，use_start=False）"


#: ../../commander_api/index.rst:100
msgid "Gets a sparse route and dense path from start to goal, where start and goal may be of type ``PoseStamped`` or ``int`` for known NodeIDs."
msgstr "获取从起始点到目标点的稀疏路线和稠密路径，其中起始点和目标点可以是 ``PoseStamped`` 或已知节点ID的 ``int`` 类型。"


#: ../../commander_api/index.rst:103
msgid "getandTrackRoute(start, goal, use_start=False)"
msgstr "getandTrackRoute（start，goal，use_start=False）"


#: ../../commander_api/index.rst:103
msgid "Gets and tracks a sparse route and dense path from start to goal, where start & goal may be of type ``PoseStamped`` or ``int`` for known NodeIDs."
msgstr "获取并跟踪从起始点到目标点的稀疏路线和稠密路径，其中起始点和目标点可以是 ``PoseStamped`` 或已知节点ID的 ``int`` 类型。"


#: ../../commander_api/index.rst:106
msgid "smoothPath(path, smoother_id='', max_duration=2.0, check_for_collision=False)"
msgstr "smoothPath(path, smoother_id='', max_duration=2.0, check_for_collision=False)"


#: ../../commander_api/index.rst:106
msgid "Smooths a given path of type ``nav_msgs/Path``."
msgstr "平滑给定类型为 ``nav_msgs/Path`` 的路径。"


#: ../../commander_api/index.rst:110
msgid "changeMap(map_filepath)"
msgstr "changeMap(map_filepath)"


#: ../../commander_api/index.rst:110
msgid "Requests a change from the current map to `map_filepath`'s yaml."
msgstr "请求从当前地图切换到 `map_filepath` 的 YAML 地图。"


#: ../../commander_api/index.rst:112
msgid "clearAllCostmaps()"
msgstr "clearAllCostmaps()"


#: ../../commander_api/index.rst:112
msgid "Clears both the global and local costmaps."
msgstr "清除全局和本地代价地图。"


#: ../../commander_api/index.rst:114
msgid "clearLocalCostmap()"
msgstr "clearLocalCostmap()"


#: ../../commander_api/index.rst:114
msgid "Clears the local costmap."
msgstr "清除本地代价地图。"


#: ../../commander_api/index.rst:116
msgid "clearGlobalCostmap()"
msgstr "clearGlobalCostmap()"


#: ../../commander_api/index.rst:116
msgid "Clears the global costmap."
msgstr "清除全局代价地图。"


#: ../../commander_api/index.rst:118
msgid "getGlobalCostmap()"
msgstr "getGlobalCostmap()"


#: ../../commander_api/index.rst:118
msgid "Returns the global costmap, ``nav2_msgs/Costmap``."
msgstr "返回全局代价地图，``nav2_msgs/Costmap``。"


#: ../../commander_api/index.rst:120
msgid "getLocalCostmap()"
msgstr "getLocalCostmap()"


#: ../../commander_api/index.rst:120
msgid "Returns the local costmap, ``nav2_msgs/Costmap``."
msgstr "返回本地代价地图，``nav2_msgs/Costmap``。"


#: ../../commander_api/index.rst:122
msgid "waitUntilNav2Active( navigator='bt_navigator', localizer='amcl')"
msgstr "waitUntilNav2Active( navigator='bt_navigator', localizer='amcl')"


#: ../../commander_api/index.rst:122
msgid "Blocks until Nav2 is completely online and lifecycle nodes are in the active state. To be used in conjunction with autostart or external lifecycle bringup. Custom navigator and localizer nodes can be specified"
msgstr "阻塞直到 Nav2 完全在线并且生命周期节点处于活动状态。与自动启动或外部生命周期引导一起使用。可以指定自定义导航器和定位器节点。"


#: ../../commander_api/index.rst:126
msgid "lifecycleStartup()"
msgstr "lifecycleStartup()"


#: ../../commander_api/index.rst:126
msgid "Sends a request to all lifecycle management servers to bring them into the active state, to be used if autostart is ``False`` and you want this program to control Nav2's lifecycle."
msgstr "向所有生命周期管理服务器发送请求，将它们带入活动状态。如果 ``autostart`` 为 ``False``，且您希望此程序控制 Nav2 的生命周期，则使用此功能。"


#: ../../commander_api/index.rst:130
msgid "lifecycleShutdown()"
msgstr "lifecycleShutdown()"


#: ../../commander_api/index.rst:130
msgid "Sends a request to all lifecycle management servers to shut them down."
msgstr "向所有生命周期管理服务器发送请求，关闭它们。"


#: ../../commander_api/index.rst:132
msgid "destroyNode()"
msgstr "destroyNode()"


#: ../../commander_api/index.rst:132
msgid "Releases the resources used by the object."
msgstr "释放对象使用的资源。"


#: ../../commander_api/index.rst:136
msgid "Costmap API"
msgstr "Costmap API"


#: ../../commander_api/index.rst:137
msgid "This is a Python3 API for costmap 2d messages from the stack. It provides the basic conversion, get/set, and handling semantics found in the costmap 2d C++ API."
msgstr "这是针对堆栈中 costmap 2d 消息的 Python3 API。它提供了在 costmap 2d C++ API 中找到的基本转换、获取/设置和处理语义。"


#: ../../commander_api/index.rst:140
msgid "Costmap Method"
msgstr "Costmap Method"


#: ../../commander_api/index.rst:142
msgid "getSizeInCellsX()"
msgstr "getSizeInCellsX()"


#: ../../commander_api/index.rst:142
msgid "Get map width in cells."
msgstr "获取地图的单元格宽度。"


#: ../../commander_api/index.rst:144
msgid "getSizeInCellsY()"
msgstr "getSizeInCellsY()"


#: ../../commander_api/index.rst:144
msgid "Get map height in cells."
msgstr "获取地图高度（以单元格为单位）。"


#: ../../commander_api/index.rst:146
msgid "getSizeInMetersX()"
msgstr "getSizeInMetersX()"


#: ../../commander_api/index.rst:146
msgid "Get x axis map size in meters."
msgstr "获取地图在 x 轴上的尺寸（以米为单位）。"


#: ../../commander_api/index.rst:148
msgid "getSizeInMetersY()"
msgstr "getSizeInMetersY()"


#: ../../commander_api/index.rst:148
msgid "Get y axis map size in meters."
msgstr "获取地图在 y 轴上的尺寸（以米为单位）。"


#: ../../commander_api/index.rst:150
msgid "getOriginX()"
msgstr "getOriginX()"


#: ../../commander_api/index.rst:150
msgid "Get the origin x axis of the map [m]."
msgstr "获取地图的 x 轴原点位置 [m]。"


#: ../../commander_api/index.rst:152
msgid "getOriginY()"
msgstr "getOriginY()"


#: ../../commander_api/index.rst:152
msgid "Get the origin y axis of the map [m]."
msgstr "获取地图的 y 轴原点位置 [m]。"


#: ../../commander_api/index.rst:154
msgid "getResolution()"
msgstr "getResolution()"


#: ../../commander_api/index.rst:154
msgid "Get map resolution [m/cell]."
msgstr "获取地图分辨率 [m/单元格]。"


#: ../../commander_api/index.rst:156
msgid "getGlobalFrameID()"
msgstr "getGlobalFrameID()"


#: ../../commander_api/index.rst:156
msgid "Get global frame_id."
msgstr "获取全局 frame_id。"


#: ../../commander_api/index.rst:158
msgid "getCostmapTimestamp()"
msgstr "getCostmapTimestamp()"


#: ../../commander_api/index.rst:158
msgid "Get costmap timestamp."
msgstr "获取代价地图的时间戳。"


#: ../../commander_api/index.rst:160
msgid "getCostXY(mx, my)"
msgstr "getCostXY(mx, my)"


#: ../../commander_api/index.rst:160
msgid "Get the cost (``np.uint8``) of a cell in the costmap using mx (``int``) , my (``int``) of Map Coordinate."
msgstr "使用地图坐标中的mx（``int``）和my（``int``）获取代价地图中单元格的代价（``np.uint8``）。"


#: ../../commander_api/index.rst:163
msgid "getCostIdx(index)"
msgstr "getCostIdx（index）"


#: ../../commander_api/index.rst:163
msgid "Get the cost (``np.uint8``) of a cell in the costmap using index (``int``)"
msgstr "使用索引（``int``）获取代价地图中单元格的代价（``np.uint8``）。"


#: ../../commander_api/index.rst:165
msgid "setCost(mx, my, cost)"
msgstr "setCost（mx，my，cost）"


#: ../../commander_api/index.rst:165
msgid "Set the cost (``np.uint8``) of a cell in the costmap using mx (``int``) , my (``int``) of Map Coordinate."
msgstr "使用地图坐标中的mx（``int``）和my（``int``）设置代价地图中单元格的代价（``np.uint8``）。"


#: ../../commander_api/index.rst:168
msgid "mapToWorld(mx, my)"
msgstr "mapToWorld（mx，my）"


#: ../../commander_api/index.rst:168
msgid "Get the wx (``float``) [m], wy (``float``) [m] of world coordinate XY using mx (``int``), my (``int``) of map coordinate XY"
msgstr "使用地图坐标中的mx（``int``）和my（``int``）获取世界坐标XY上的wx（``float``）[m]和wy（``float``）[m]。"


#: ../../commander_api/index.rst:171 ../../commander_api/index.rst:193
msgid "worldToMapValidated(wx, wy)"
msgstr "worldToMapValidated（wx，wy）"


#: ../../commander_api/index.rst:171
msgid "Get the mx (``int``), my (``int``) of map coordinate XY using wx (``float``) [m], wy (``float``) [m] of world coordinate XY. If wx wy coordinates are invalid, (None,None) is returned."
msgstr "使用世界坐标XY上的wx（``float``）[m]和wy（``float``）[m]获取地图坐标XY中的mx（``int``）和my（``int``）。如果wx和wy坐标无效，则返回（None，None）。"


#: ../../commander_api/index.rst:175
msgid "getIndex(mx, my)"
msgstr "getIndex（mx，my）"


#: ../../commander_api/index.rst:175
msgid "Get the index (``int``) of the cell using mx (``int``), my (``int``) of map coordinate XY"
msgstr "使用地图坐标XY中的mx（``int``）和my（``int``）获取单元格的索引（``int``）。"


#: ../../commander_api/index.rst:180
msgid "Footprint Collision Checker API"
msgstr "足迹碰撞检查器 API"


#: ../../commander_api/index.rst:181
msgid "This is a Python3 API for a Footprint Collision Checker. It provides the needed methods to manipulate the coordinates and calculate the cost of a Footprint in a given map."
msgstr "这是一个用于足迹碰撞检测的Python3 API。它提供了操纵坐标和计算给定地图中足迹成本所需的方法。"


#: ../../commander_api/index.rst:186
msgid "Footprint Collision Checker Method"
msgstr "足迹碰撞检查器方法"


#: ../../commander_api/index.rst:188
msgid "footprintCost(footprint)"
msgstr "footprintCost(footprint)"


#: ../../commander_api/index.rst:188
msgid "Checks the footprint (``Polygon``) for collision at its implicit provided coordinate pose."
msgstr "检查隐含提供的坐标姿态处的足迹（``Polygon``）是否发生碰撞。"


#: ../../commander_api/index.rst:190
msgid "lineCost(x0, x1, y0, y1, step_size=0.5)"
msgstr "lineCost(x0, x1, y0, y1, step_size=0.5)"


#: ../../commander_api/index.rst:190
msgid "Iterate over all the points along a line and check for collision. The line is defined by x0, y0, x1, y1, step_size (``int``) or (``float``)."
msgstr "沿着一条线迭代所有点，并检查是否发生碰撞。该线由 x0、y0、x1、y1、step_size（``int``）或（``float``）定义。"


#: ../../commander_api/index.rst:193
msgid "Get the mx (``int``), my (``int``) of map coordinate XY using wx (``float``) [m], wy (``float``) [m] of world coordinate XY. If wx wy coordinates are invalid, (None,None) is returned. Returns None if costmap is not defined yet through  (``setCostmap(costmap)``)."
msgstr "使用世界坐标XY的wx（浮点数）[m]和wy（浮点数）[m]获取地图坐标XY的mx（整数）和my（整数）。如果wx和wy坐标无效，则返回（None，None）。如果尚未通过（setCostmap（costmap））定义costmap，则返回None。"


#: ../../commander_api/index.rst:198
msgid "pointCost(x, y)"
msgstr "pointCost(x, y)"


#: ../../commander_api/index.rst:198
msgid "Get the cost of a point in the costmap using map coordinates XY. (``int``)"
msgstr "使用地图坐标XY获取costmap中某一点的成本。（整数）"


#: ../../commander_api/index.rst:200
msgid "setCostmap(costmap)"
msgstr "setCostmap(costmap)"


#: ../../commander_api/index.rst:200
msgid "Specify which costmap to use with the footprint collision checker. (``PyCostmap2D``)"
msgstr "指定足迹碰撞检测使用的costmap。（PyCostmap2D）"


#: ../../commander_api/index.rst:202
msgid "footprintCostAtPose(x, y, theta, footprint)"
msgstr "footprintCostAtPose(x, y, theta, footprint)"


#: ../../commander_api/index.rst:202
msgid "Get the cost of a footprint at a specific Pose in map coordinates. x, y, theta (``float``) footprint (``Polygon``)."
msgstr "在地图坐标中获取特定姿态处足迹的成本。x，y，theta（浮点数）足迹（多边形）。"


#: ../../commander_api/index.rst:207
msgid "Examples and Demos"
msgstr "示例和演示"


#: ../../commander_api/index.rst:209
msgid "All of these can be found in the `package <https://github.com/ros-planning/navigation2/tree/main/nav2_simple_commander>`_."
msgstr "所有这些内容都可以在`package <https://github.com/ros-planning/navigation2/tree/main/nav2_simple_commander>`_中找到。"


msgid "Alternative text"
msgstr "替代文本"


#: ../../commander_api/index.rst:216
msgid "The ``nav2_simple_commander`` has a few examples to highlight the API functions available to you as a user:"
msgstr "``nav2_simple_commander`` 提供了一些示例，以突出显示作为用户可用的 API 函数："


#: ../../commander_api/index.rst:218
msgid "``example_nav_to_pose.py`` - Demonstrates the navigate to pose capabilities of the navigator, as well as a number of auxiliary methods."
msgstr "``example_nav_to_pose.py`` - 演示导航器的导航到位姿功能，以及一些辅助方法。"


#: ../../commander_api/index.rst:219
msgid "``example_nav_through_poses.py`` - Demonstrates the navigate through poses capabilities of the navigator, as well as a number of auxiliary methods."
msgstr "``example_nav_through_poses.py`` - 演示导航器通过姿势导航的能力，以及一些辅助方法。"


#: ../../commander_api/index.rst:220
msgid "``example_waypoint_follower.py`` - Demonstrates the waypoint following capabilities of the navigator, as well as a number of auxiliary methods."
msgstr "``example_waypoint_follower.py`` - 演示导航器的路径点跟随功能，以及一些辅助方法。"


#: ../../commander_api/index.rst:221
msgid "``example_follow_path.py`` - Demonstrates the path following capabilities of the navigator, as well as a number of auxiliary methods like path smoothing."
msgstr "``example_follow_path.py`` - 演示导航器的路径跟随能力，以及一些辅助方法，如路径平滑。"


#: ../../commander_api/index.rst:222
msgid "``example_assisted_teleop.py`` - Demonstrates the assisted teleop capabilities of the navigator."
msgstr "``example_assisted_teleop.py`` - 演示导航器的辅助遥控功能。"


#: ../../commander_api/index.rst:223
msgid "``example_route.py`` - Demonstrates the Route server capabilities of the navigator."
msgstr "``example_route.py`` - 演示导航器的路由服务器功能。"


#: ../../commander_api/index.rst:225
msgid "The ``nav2_simple_commander`` has a few demonstrations to highlight a couple of simple autonomy applications you can build using the API:"
msgstr "``nav2_simple_commander``有几个演示，可以突出使用API构建的几个简单自主应用程序："


#: ../../commander_api/index.rst:227
msgid "``demo_security.py`` - A simple security robot application, showing how to have a robot follow a security route using Navigate Through Poses to do a patrol route, indefinitely."
msgstr "``demo_security.py`` - 一个简单的安保机器人应用程序，展示了如何使用导航通过姿势进行巡逻路线。"


#: ../../commander_api/index.rst:228
msgid "``demo_picking.py`` - A simple item picking application, showing how to have a robot drive to a specific shelf in a warehouse to either pick an item or have a person place an item into a basket and deliver it to a destination for shipping using Navigate To Pose."
msgstr "``demo_picking.py`` - 一个简单的物品拾取应用程序，展示了如何让机器人驶向仓库中的特定货架，要么拾取物品，要么让人员将物品放入篮子并将其送到目的地以供发货，使用导航到位姿功能。"


#: ../../commander_api/index.rst:229
msgid "``demo_inspection.py`` - A simple shelf inspection application, showing how to use the Waypoint Follower and task executors to take pictures, RFID scans, etc of shelves to analyze the current shelf statuses and locate items in the warehouse."
msgstr "``demo_inspection.py`` - 一个简单的货架检查应用程序，展示了如何使用Waypoint Follower和任务执行器来拍照、RFID扫描等，以分析当前货架状态并定位仓库中的物品。"


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020
# This file is distributed under the same license as the Navigation 2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Navigation 2 latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-18 21:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:4
msgid "Build Troubleshooting Guide"
msgstr "构建故障排除指南"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:7
msgid "Common Nav2 Dependencies Build Failures"
msgstr "常见Nav2依赖项构建失败"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:9
msgid "Make sure that .bashrc file has no ROS environment variables in it. Open new terminals and try to build the packages again."
msgstr "确保.bashrc文件中没有ROS环境变量。打开新的终端并尝试重新构建软件包。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:11
msgid "Make sure to run rosdep for the correct ROS 2 distribution. ``rosdep install -y -r -q --from-paths src --ignore-src --rosdistro <ros2-distro>``"
msgstr "确保对正确的ROS 2发行版运行rosdep。``rosdep install -y -r -q --from-paths src --ignore-src --rosdistro <ros2-distro>``"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:14
msgid "Make sure that the ``setup.bash`` is sourced in the ROS 2 installation or ROS 2 main build workspace, if applicable. Check if you can run talker and listener nodes."
msgstr "确保在ROS 2安装或ROS 2主要构建工作区中（如果适用），已加载``setup.bash``文件。检查是否可以运行talker和listener节点。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:16
msgid "Make sure that the ``setup.bash`` in ``nav2_depend_ws/install`` is sourced."
msgstr "确保在``nav2_depend_ws/install``目录中的``setup.bash``已被引用。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:18
msgid "Check if you have the correct ROS version and distribution. ``printenv | grep -i ROS``"
msgstr "检查是否使用了正确的ROS版本和发行版。``printenv | grep -i ROS``"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:20
msgid "If you see a bunch of errors on startup about ``map`` or ``odom`` frame not existing, remember to activate drivers (or gazebo for simulation) and set an initial pose in ``map`` frame. Costmap2D will block activation until a full TF tree is available."
msgstr "如果在启动时看到关于``map``或``odom``坐标系不存在的错误，请记得激活驱动程序（或用于仿真的gazebo）并在``map``坐标系中设置初始姿态。只有在完整的TF树可用时，Costmap2D才会阻止激活。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:22
msgid "Make sure you've activated the lifecycle nodes if you're not seeing transforms or servers running."
msgstr "如果未看到转换或服务器运行，请确保已激活生命周期节点。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:24
msgid "Search `GitHub Issues <https://github.com/ros-planning/navigation2/issues>`_"
msgstr "在`GitHub Issues <https://github.com/ros-planning/navigation2/issues>`_中进行搜索。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:26
msgid "Make sure you're using the correct branch for your distribution. There is no cross support from branch for ``DistroA`` in ``DistroB``. The main development branch uses the rolling distribution."
msgstr "确保为您的发行版使用正确的分支。在``DistroB``中，没有来自``DistroA``的跨支持。主要开发分支使用rolling发行版。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:28
msgid "Still can't solve it? Let us know about your issue. `Open a ticket <https://github.com/ros-planning/navigation2/issues/new>`_."
msgstr "仍然无法解决？告诉我们您的问题。`提交工单 <https://github.com/ros-planning/navigation2/issues/new>`_。"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:31
msgid "Reporting Issue"
msgstr "报告问题"


#: ../../development_guides/build_docs/build_troubleshooting_guide.rst:33
msgid "If you run into any issues when building Navigation2, you can use the search tool in the issues tab on `GitHub <https://github.com/ros-planning/navigation2/issues>`_ and always feel free to `open a ticket <https://github.com/ros-planning/navigation2/issues/new>`_."
msgstr "如果在构建Navigation2时遇到任何问题，您可以在`GitHub <https://github.com/ros-planning/navigation2/issues>`_的问题选项卡中使用搜索工具，并随时`提交工单 <https://github.com/ros-planning/navigation2/issues/new>`_。"


#: ../../development_guides/build_docs/index.rst:4
msgid "Build and Install"
msgstr "构建和安装"


#: ../../development_guides/build_docs/index.rst:7
msgid "Install"
msgstr "安装"


#: ../../development_guides/build_docs/index.rst:9
msgid "Nav2 and its dependencies are released as binaries. You may install it via the following to get the latest stable released version:"
msgstr "Nav2及其依赖项发布为二进制文件。您可以通过以下方式安装它以获取最新的稳定版本："


#: ../../development_guides/build_docs/index.rst:21
msgid "Build"
msgstr "构建"


#: ../../development_guides/build_docs/index.rst:23
msgid "There are a few ways to build Nav2 using:"
msgstr "有几种方法可以构建Nav2，包括："


#: ../../development_guides/build_docs/index.rst:25 ../../development_guides/build_docs/index.rst:43
msgid "Released Distribution Binaries"
msgstr "已发布的分发二进制文件"


#: ../../development_guides/build_docs/index.rst:27
msgid "Build Nav2 using readily installable binary dependencies"
msgstr "使用现成可安装的二进制依赖项构建Nav2"


#: ../../development_guides/build_docs/index.rst:29 ../../development_guides/build_docs/index.rst:77
msgid "Rolling Development Source"
msgstr "滚动式开发源代码"


#: ../../development_guides/build_docs/index.rst:31
msgid "Build Nav2 using custom or latest source dependencies"
msgstr "使用自定义或最新的源代码依赖项构建Nav2"


#: ../../development_guides/build_docs/index.rst:33 ../../development_guides/build_docs/index.rst:111
msgid "Docker Container Images"
msgstr "Docker 容器映像"


#: ../../development_guides/build_docs/index.rst:35
msgid "Build Nav2 using cached images and templated Dockerfiles"
msgstr "使用缓存的映像和模板化的Docker文件构建Nav2"


#: ../../development_guides/build_docs/index.rst:38
msgid "For a *repeatable*, *reproducible* and *streamlined* development experience, check the Nav2 documentation on using :ref:`devcontainers`!"
msgstr "要获得可重复、可复制和流畅的开发体验，请查看 Nav2 文档中关于使用 :ref:`devcontainers` 的内容！"


#: ../../development_guides/build_docs/index.rst:45
msgid "To build Nav2, you'll first need to build or install ROS 2 and related development tools, including: ``colcon``, ``rosdep`` and ``vcstool``."
msgstr "要构建Nav2，您首先需要构建或安装ROS 2及其相关开发工具，包括：``colcon``、``rosdep``和``vcstool``。"


#: ../../development_guides/build_docs/index.rst:48
msgid "For more information on building or installing ROS 2 distros, see the official documentation:"
msgstr "有关构建或安装 ROS 2 发行版的更多信息，请参阅官方文档："


#: ../../development_guides/build_docs/index.rst:50
msgid "`ROS 2 Installation <https://docs.ros.org/en/rolling/Installation.html>`_"
msgstr "``ROS 2安装 <https://docs.ros.org/en/rolling/Installation.html>`_"


#: ../../development_guides/build_docs/index.rst:51
msgid "`Install development tools and ROS tools <https://docs.ros.org/en/rolling/Installation/Alternatives/Ubuntu-Development-Setup.html#install-development-tools-and-ros-tools>`_"
msgstr "`安装开发工具和 ROS 工具 <https://docs.ros.org/en/rolling/Installation/Alternatives/Ubuntu-Development-Setup.html#install-development-tools-and-ros-tools>`_"


#: ../../development_guides/build_docs/index.rst:53
msgid "Once your environment is setup, clone the repo, install all dependencies, and build the workspace:"
msgstr "一旦您的环境设置完成，克隆存储库，安装所有依赖项并构建工作空间："


#: ../../development_guides/build_docs/index.rst:56
msgid "The branch naming schema for Nav2 is organized by ROS distro, while the default branch for Rolling is ``main``."
msgstr "Nav2 的分支命名方案按照 ROS 发行版进行组织，而 Rolling 的默认分支为 ``main``。"


#: ../../development_guides/build_docs/index.rst:69 ../../development_guides/build_docs/index.rst:103
msgid "You can then ``source ~/nav2_ws/install/setup.bash`` to get ready for demonstrations!"
msgstr "然后您可以执行 ``source ~/nav2_ws/install/setup.bash`` 准备进行演示！"


#: ../../development_guides/build_docs/index.rst:72
msgid "For more examples on building Nav2 from released distribution binaries, checkout `distro.Dockerfile <https://github.com/ros-planning/navigation2/blob/main/tools/distro.Dockerfile>`_."
msgstr "要了解如何从发布的分发二进制文件构建Nav2的更多示例，请查看`distro.Dockerfile <https://github.com/ros-planning/navigation2/blob/main/tools/distro.Dockerfile>`_。"


#: ../../development_guides/build_docs/index.rst:79
msgid "Building Nav2 using rolling development source is similar to building Nav2 from released distribution binaries, where instead you build dependencies from source using the main development branches for all ROS based packages."
msgstr "使用滚动开发源构建Nav2类似于使用发布的分发二进制文件构建Nav2，不同之处在于使用所有基于ROS的软件包的主要开发分支从源代码构建依赖项。"


#: ../../development_guides/build_docs/index.rst:82
msgid "For more information on building ROS 2 from source, see the official documentation:"
msgstr "要了解如何从源代码构建ROS 2的更多信息，请参阅官方文档："


#: ../../development_guides/build_docs/index.rst:84
msgid "`ROS 2 Building from source <https://docs.ros.org/en/rolling/Installation.html#building-from-source>`_"
msgstr "`ROS 2 从源代码构建 <https://docs.ros.org/en/rolling/Installation.html#building-from-source>`_"


#: ../../development_guides/build_docs/index.rst:86
msgid "Once your environment is setup, clone the repo, import all dependencies, and build the workspace:"
msgstr "完成环境设置后，克隆存储库，导入所有依赖项并构建工作空间："


#: ../../development_guides/build_docs/index.rst:89
msgid "Be sure to check that all dependencies you need are included and uncommented in the ``.repos`` file."
msgstr "请确保检查您需要的所有依赖项是否已在 ``.repos`` 文件中包含并取消注释。"


#: ../../development_guides/build_docs/index.rst:106
msgid "For more examples on building Nav2 from rolling development source, checkout `source.Dockerfile <https://github.com/ros-planning/navigation2/blob/main/tools/source.Dockerfile>`_."
msgstr "要了解如何从滚动开发源构建Nav2的更多示例，请查看`source.Dockerfile <https://github.com/ros-planning/navigation2/blob/main/tools/source.Dockerfile>`_。"


#: ../../development_guides/build_docs/index.rst:113
msgid "Building Nav2 using Docker container images provides a repeatable and reproducible environment to automate and self document the entire setup process. Instead of manually invoking the development tools as documented above, you can leverage the project's Dockerfiles to build and install Nav2 for various distributions."
msgstr "使用Docker容器镜像构建Nav2提供了可重复和可复制的环境，以自动化和自我记录整个设置过程。与上述文档中手动调用开发工具不同，您可以利用项目的Docker文件来构建和安装适用于各种分发版本的Nav2。"


#: ../../development_guides/build_docs/index.rst:116
msgid "For more information on installing Docker or leaning about Dockerfiles, see the official documentation:"
msgstr "要了解有关安装Docker或了解Docker文件的更多信息，请参阅官方文档："


#: ../../development_guides/build_docs/index.rst:118
msgid "`Docker Engine <https://docs.docker.com/engine/install>`_"
msgstr "`Docker 引擎 <https://docs.docker.com/engine/install>`_"


#: ../../development_guides/build_docs/index.rst:119
msgid "`Dockerfile reference <https://docs.docker.com/engine/reference/builder>`_"
msgstr "`Dockerfile参考 <https://docs.docker.com/engine/reference/builder>`_"


#: ../../development_guides/build_docs/index.rst:121
msgid "Once your system is setup, you can build the Nav2 Dockerfile from the root of the repo:"
msgstr "一旦您的系统设置完成，您可以从存储库的根目录中构建Nav2 Dockerfile："


#: ../../development_guides/build_docs/index.rst:133
msgid "The `docker build <https://docs.docker.com/engine/reference/commandline/build/>`_ command above creates a tagged image using the `Dockerfile` from the context specified using the path to the repo, where build-time variables are set using additional arguments, e.g. passing a set of `colcon mixins <https://github.com/colcon/colcon-mixin-repository>`_ to configure the workspace build. Check the ``ARG`` directives in the `Dockerfile` to discover all build-time variables available. The command also specifies an `external cache source <https://docs.docker.com/engine/reference/commandline/build/#cache-from>`_ to pull the latest cached image from Nav2's `Container Registry <https://github.com/ros-planning/navigation2/pkgs/container/navigation2>`_ to speed up the build process."
msgstr "上述`docker build <https://docs.docker.com/engine/reference/commandline/build/>`_命令使用来自指定路径到存储库的上下文的`Dockerfile`创建了一个带有标签的镜像，其中使用附加参数设置了构建时变量，例如通过传递一组`colcon mixins <https://github.com/colcon/colcon-mixin-repository>`_来配置工作空间构建。查看`Dockerfile`中的``ARG``指令以发现所有可用的构建时变量。该命令还指定了一个`外部缓存源 <https://docs.docker.com/engine/reference/commandline/build/#cache-from>`_，以从Nav2的`容器注册表 <https://github.com/ros-planning/navigation2/pkgs/container/navigation2>`_中拉取最新的缓存镜像以加快构建过程。"


#: ../../development_guides/build_docs/index.rst:136
msgid "The images cached from above are used for Nav2 CI, but can also be used with Nav2 :ref:`devcontainers`!"
msgstr "上面缓存的镜像用于Nav2 CI，但也可以与Nav2的devcontainers一起使用！"


#: ../../development_guides/build_docs/index.rst:141
msgid "Generate Doxygen"
msgstr "生成 Doxygen"


#: ../../development_guides/build_docs/index.rst:143
msgid "Run ``doxygen`` in the root of the Nav2 repository. It will generate a ``/doc/*`` directory containing the documentation. The documentation entrypoint in a browser is index.html."
msgstr "在Nav2存储库的根目录中运行``doxygen``。它将生成一个包含文档的``/doc/*``目录。文档的入口点在浏览器中是index.html。"


#: ../../development_guides/build_docs/index.rst:150
msgid "Help"
msgstr "帮助"


#: ../../development_guides/build_docs/index.rst:152
msgid ":ref:`build-troubleshooting-guide`"
msgstr ":ref:`build-troubleshooting-guide`"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:2
msgid "Dev Container Guide"
msgstr "开发容器指南"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:4
msgid "In this guide, we'll walk through the process of creating and using dev containers for the project. While included subsections will provide greater detail on the various aspects of the process, complete comprehension of the entire guide is not required to get started, but is recommended for those interested in how dev containers work, or how to customize and optimize them for their own personal workflows."
msgstr "在本指南中，我们将逐步介绍为该项目创建和使用dev容器的过程。尽管包含的子部分将提供有关该过程各个方面的更详细信息，但并非必须完全理解整个指南即可开始使用，但对于那些对dev容器的工作原理、如何自定义和优化它们以适应自己的个人工作流程感兴趣的人来说，建议阅读完整的指南。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:6
msgid "Creating Dev Containers"
msgstr "创建开发容器"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:8
msgid "Before creating a dev container, you'll want to choose the exact configuration to use. By default the `.devcontainer/devcontainer.json` configuration is selected, however you can also choose any other `devcontainer.json` file in the `.devcontainer/` directory, where such configurations can be nested to provide greater customization: either by targeting different stages within different Dockerfiles, overriding any merged metadata or default properties, or inclusion of additional extensions and alternate commands."
msgstr "在创建dev容器之前，您需要选择要使用的确切配置。默认情况下选择`.devcontainer/devcontainer.json`配置，但您也可以选择`.devcontainer/`目录中的任何其他`devcontainer.json`文件，这样可以嵌套这样的配置以提供更大的自定义：可以通过针对不同的Dockerfile内的不同阶段，覆盖任何已合并的元数据或默认属性，或包含其他扩展和备用命令来进行自定义。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:11
msgid "The specification, reference, and schema for the `devcontainer.json` config file format can be found here:"
msgstr "有关 `devcontainer.json` 配置文件格式的规范、参考和模式，请参阅此处："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:12
msgid "[Specification](https://containers.dev/implementors/spec)"
msgstr "[规范](https://containers.dev/implementors/spec)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:13
msgid "Development Container Specification"
msgstr "开发容器规范"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:14
msgid "[Reference](https://containers.dev/implementors/json_reference)"
msgstr "[参考](https://containers.dev/implementors/json_reference)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:15
msgid "Metadata and properties reference"
msgstr "元数据和属性参考"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:16
msgid "[Schema](https://containers.dev/implementors/json_schema)"
msgstr "[模式](https://containers.dev/implementors/json_schema)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:17
msgid "JSON schema for `devcontainer.json`"
msgstr "用于 `devcontainer.json` 的 JSON 模式"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:20
msgid "Building the image"
msgstr "构建镜像"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:22
msgid "When first creating Dev Containers, any supporting tool or service used will download and build the docker images needed to run the container. This includes pulling any parent images the project's Dockerfile builds `FROM`, as well as any tags or layers declared via `cacheFrom`, as specified in the chosen `devcontainer.json` config file. This can take a while, but only needs to be done once, or at least not again until such layers are updated and pushed to the image registry."
msgstr "当首次创建 Dev Containers 时，任何使用的支持工具或服务将下载并构建所需的 Docker 镜像以运行容器。这包括拉取项目的 Dockerfile 构建中所声明的任何父镜像（`FROM`），以及通过 `cacheFrom` 在选择的 `devcontainer.json` 配置文件中声明的任何标签或层。这可能需要一些时间，但只需要执行一次，或者至少在这些层被更新并推送到镜像注册表之前不需要再次执行。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:24
msgid "Specifically, for this project, the default `devcontainer.json` file targets the `dever` stage within the project's root Dockerfile, the stage that also includes handy tools for developing the project, such as bash auto completion. This stage is in turn built `FROM` the `builder` stage, the stage that only includes the dependencies needed for building the project, as reused by the project's CI. For example, the `dever` stage modifies `/etc/bash.bashrc` to automatically source `install/setup.bash` from the underlay workspace, ensuring all VS Code extensions are loaded with the correct environment, while avoiding any race conditions during installation and startup."
msgstr "特别是对于这个项目，默认的`devcontainer.json`文件针对项目根目录中的`dever`阶段的Dockerfile进行了配置，该阶段还包括用于开发项目的实用工具，如bash自动完成。而这个阶段是从`builder`阶段构建的，`builder`阶段仅包括构建项目所需的依赖项，由项目的CI重复使用。例如，`dever`阶段修改了`/etc/bash.bashrc`以自动从基础工作区中源`install/setup.bash`，确保所有VS Code扩展都以正确的环境加载，同时避免安装和启动期间的任何竞争条件。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:26
msgid "To speed up the initial build, images layers from this `builder` stage are cached by pulling the same image tag used by the project's CI, hosted from the image registry. This ensures your local dev container replicates our CI environment as close as possible, while benefiting from any cached work preemptively performed by the CI. Yet, this still allows you to customize the project's Dockerfile and rebuild the container, without needing to update CI images to reflect your local modifications."
msgstr "为了加快初始构建速度，从这个 `builder` 阶段的镜像层通过拉取与项目的 CI 使用的相同镜像标签进行缓存，该标签从镜像注册表中托管。这确保您的本地开发容器尽可能地复制我们的 CI 环境，同时从 CI 预先执行的任何缓存工作中获益。然而，这仍然允许您自定义项目的 Dockerfile 并重新构建容器，而无需更新 CI 镜像以反映您的本地修改。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:29
msgid "More details on the project's CI and related docker image registry can be found here:"
msgstr "可以在这里找到关于该项目的CI和相关的Docker镜像注册表的更多详细信息："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:31
msgid "[Chronicles of Caching and Containerising CI for Nav2](https://vimeo.com/649647161/5b0c278e6c)"
msgstr "[缓存和为 Nav2 创建容器化 CI 的编年史](https://vimeo.com/649647161/5b0c278e6c)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:32
msgid "Video presentation from ROS World 2021 - Ruffin White"
msgstr "ROS World 2021 - Ruffin White的视频演示"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:35
msgid "Once the base image from the target stage is built, the supporting tool or service may then add additional layers to the image, such as installing additional [features](https://containers.dev/features) or customizations. For VS Code, this also includes some fancy file caching for any extensions to install later. Once this custom image is built, it is then used to start the dev container."
msgstr "一旦构建了目标阶段的基础镜像，支持工具或服务可以向镜像添加其他层，例如安装其他[功能](https://containers.dev/features)或定制内容。对于 VS Code，这还包括一些用于稍后安装的扩展的文件缓存。构建此自定义镜像后，将使用它来启动开发容器。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:37
msgid "Starting the container"
msgstr "启动容器"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:39
msgid "When first creating Dev Containers, any supporting tool or service will invoke a sequence of commands specified in the chosen `devcontainer.json` config file. This can take a while, but only needs to be done once, or at least not again until the container is rebuilt, triggered by either updating the Dockerfile, base image, or `.devcontainer/` config."
msgstr "当首次创建 Dev Containers 时，任何支持工具或服务都将调用在选择的 `devcontainer.json` 配置文件中指定的一系列命令。这可能需要一些时间，但只需要执行一次，或者至少在重新构建容器之前不需要再次执行，可以通过更新 Dockerfile、基础镜像或 `.devcontainer/` 配置来触发重新构建。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:41
msgid "Specifically, for this project, the default `devcontainer.json` config executes the `onCreateCommand` to initially colcon cache, clean, and build the overlay workspace for the project. This ensures the workspace is precompiled and ready to use, while also ensuring any changes to the project's source code are reflected in the container. This is useful for:"
msgstr "具体来说，对于这个项目，默认的`devcontainer.json`配置执行`onCreateCommand`，以便为项目的覆盖工作空间进行初始的colcon缓存、清理和构建。这确保了工作空间被预编译并准备就绪，同时还确保了对项目源代码的任何更改都会反映在容器中。这对于以下情况很有用："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:43
msgid "IntelliSense"
msgstr "IntelliSense"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:44
msgid "Enables VS Code extensions to parse auto generated code"
msgstr "使得VS Code扩展能够解析自动生成的代码"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:45
msgid "Applicable for ROS package defining messages and services files"
msgstr "适用于定义消息和服务文件的ROS软件包"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:46
msgid "Necessary for code modeling, navigation, and syntax highlighting"
msgstr "在代码建模、导航和语法高亮方面是必需的"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:47 ../../development_guides/devcontainer_docs/devcontainer_guide.md:72
msgid "Caching"
msgstr "缓存"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:48
msgid "Enables Codespace Prebuilds to cache the workspace artifacts"
msgstr "使得Codespace预构建能够缓存工作空间的构建产物"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:49
msgid "Applicable for reducing startup time when spawning new Codespaces"
msgstr "适用于在生成新的Codespaces时减少启动时间"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:50
msgid "Necessary for limiting costs from CPU and storage usage"
msgstr "限制CPU和存储使用的成本是必需的"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:52
msgid "While the colcon workspace is being built, VS Code will simultaneously install any specified extensions and settings. Next the `updateContentCommand` is executed, which reruns whenever the container is started or restarted. Specifically, for this project, this command re-cleans and re-builds the same colcon workspace as before, but only for invalidated packages detected by colcon cache using the lockfiles initialized during the `onCreateCommand`. This caching behavior also replicates the project's CI workflow. This is useful for:"
msgstr "当构建colcon工作空间时，VS Code会同时安装任何指定的扩展和设置。接下来执行`updateContentCommand`命令，该命令在容器启动或重新启动时重新运行。具体来说，在这个项目中，该命令会重新清理和重新构建与之前相同的colcon工作空间，但仅适用于通过在`onCreateCommand`期间初始化的lockfiles检测到的无效包。这种缓存行为还复制了项目的CI工作流程。这对于以下情况非常有用："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:54
msgid "Branching"
msgstr "分支管理"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:55
msgid "Enables caching of workspace artifacts when switching between branches"
msgstr "在切换分支时启用工作空间构建的缓存"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:56
msgid "Applicable for reviewing pull requests without rebuilding entire container"
msgstr "适用于在不重新构建整个容器的情况下审核拉取请求"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:57
msgid "Necessary for reducing startup time when spawning new Codespaces"
msgstr "在生成新的Codespaces时减少启动时间所必需"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:60
msgid "More documentation about these additional colcon verb extensions can be found here:"
msgstr "这些额外的colcon动词扩展的更多文档可以在这里找到："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:62
msgid "[colcon-cache](https://github.com/ruffsl/colcon-cache)"
msgstr "[colcon-cache](https://github.com/ruffsl/colcon-cache)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:63
msgid "A colcon extension to cache the processing of packages"
msgstr "一个colcon扩展，用于缓存软件包的处理"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:64
msgid "[colcon-clean](https://github.com/colcon/colcon-clean)"
msgstr "[colcon-clean](https://github.com/colcon/colcon-clean)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:65
msgid "A colcon extension to clean package workspaces"
msgstr "一个colcon扩展，用于清理软件包工作空间"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:68
msgid "Finally, the `postCreateCommand` is executed, which also reruns whenever the container is started or restarted. Specifically, for this project, this command makes a last few tweaks to the user's environment to improve the development experience."
msgstr "最后，执行`postCreateCommand`，每当容器启动或重新启动时都会重新运行该命令。对于这个项目，该命令对用户的环境进行最后的微调，以提高开发体验。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:70
msgid "To speed up subsequent startups, volumes that are mounted to the container store a persistent ccache and colcon workspace, while the environment is set to enable [ccache](https://ccache.dev/) via [colcon mixins](https://github.com/colcon/colcon-mixin-repository). These volumes are labeled using the [`devcontainerId`](https://containers.dev/implementors/json_reference/#variables-in-devcontainerjson) variable, which uniquely identify the dev container on a Docker host, allowing us to refer to a common identifier that is unique to the dev container, while remaining stable across rebuilds. This is useful for:"
msgstr "为了加快后续的启动速度，被挂载到容器的卷会存储一个持久的ccache和colcon工作空间，同时环境被设置为通过colcon mixins启用[ccache](https://ccache.dev/)（参见[colcon mixins](https://github.com/colcon/colcon-mixin-repository)）。这些卷使用[`devcontainerId`](https://containers.dev/implementors/json_reference/#variables-in-devcontainerjson)变量进行标记，该变量在Docker主机上唯一标识开发容器，使我们能够引用一个对开发容器唯一且在重建过程中保持稳定的常见标识符。这对于以下情况很有用："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:73
msgid "Enables colcon workspaces and ccache to persist between container rebuilds"
msgstr "使colcon工作空间和ccache在容器重建之间持久存在"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:74
msgid "Applicable for avoiding re-compilation when modifying dev container config files"
msgstr "适用于修改开发容器配置文件时避免重新编译"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:75
msgid "Necessary for quickly customizing image or features without rebuilding from scratch"
msgstr "在不必从头开始重新构建的情况下快速自定义映像或功能所必需的"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:78
msgid "While these volumes are uniquely named, you could rename them locally to further organize or segment works-in-progress. E.g. appending branch names to the volume name to quickly switch between pull requests and cached colcon workspaces."
msgstr "虽然这些卷具有唯一的名称，但您可以在本地将它们重命名，以进一步组织或分割正在进行中的工作。例如，将分支名称附加到卷名称，以快速切换不同的拉取请求和缓存的colcon工作空间。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:81
msgid "Additionally, the container can be granted [privileged](https://docs.docker.com/engine/reference/commandline/run/#privileged) and non-default [Linux capabilities](https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities), connected using the [host](https://docs.docker.com/network/host/) network mode and [IPC](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) and [PID](https://docs.docker.com/engine/reference/run/#pid-settings---pid) spaces, with a relaxed [security configuration](https://docs.docker.com/engine/reference/run/#security-configuration) and seccomp confinement for native debugging and external connectivity. This is useful for:"
msgstr "此外，容器可以被授予[privileged](https://docs.docker.com/engine/reference/commandline/run/#privileged)和非默认的[Linux capabilities](https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities)，使用[host](https://docs.docker.com/network/host/)网络模式以及[IPC](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc)和[PID](https://docs.docker.com/engine/reference/run/#pid-settings---pid)空间进行连接，具有放宽的[security configuration](https://docs.docker.com/engine/reference/run/#security-configuration)和seccomp限制，用于本机调试和外部连接。这对于以下情况非常有用："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:83
msgid "Hybrid development"
msgstr "混合式开发"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:84
msgid "Enables connecting ROS nodes external to the container"
msgstr "使ROS节点可以连接到容器外部"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:85
msgid "Applicable for debugging or visualizing distributed systems"
msgstr "适用于调试或可视化分布式系统"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:86
msgid "Necessary for DDS discovery and shared memory transport"
msgstr "DDS发现和共享内存传输所必需的"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:87
msgid "Device connectivity"
msgstr "设备连接性"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:88
msgid "Enables hardware forwarding from host machine to container"
msgstr "允许从主机向容器进行硬件转发"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:89
msgid "Applicable for ROS package using sensors and actuators"
msgstr "适用于使用传感器和执行器的ROS软件包"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:90
msgid "Necessary for some GPU drivers and USB devices"
msgstr "对于一些GPU驱动程序和USB设备是必需的"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:93
msgid "Such `runArgs` in the `devcontainer.json` config can be enabled or customized, either expanded or or narrowed in scope, to better suit your desired development environment. The default configuration merely comments out these parameters, to limit unintended side effects or cross talk between containers, but can be uncommented to accommodate the widest range of development use cases."
msgstr "在`devcontainer.json`配置中，可以启用或自定义`runArgs`，可以扩展或限制范围，以更好地适应您所需的开发环境。默认配置仅仅注释掉这些参数，以限制意外的副作用或容器之间的交互，但可以取消注释以适应最广泛的开发用例。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:97
msgid "More details on using DDS, debuggers, or devices with Docker containers can be found here:"
msgstr "关于在Docker容器中使用DDS、调试器或设备的更多详细信息可以在这里找到："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:99
msgid "[How to Communicate Across Docker Containers Using the Host Driver](https://community.rti.com/kb/how-use-rti-connext-dds-communicate-across-docker-containers-using-host-driver)"
msgstr "[如何使用主机驱动程序在Docker容器之间通信](https://community.rti.com/kb/how-use-rti-connext-dds-communicate-across-docker-containers-using-host-driver)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:100
msgid "Using the `host` network driver to access all network interfaces of the host machine from the Docker container"
msgstr "使用“host”网络驱动程序从Docker容器访问主机机器的所有网络接口"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:101
msgid "[Communicate between two Docker containers using DDS and shared memory](https://community.rti.com/kb/communicate-between-two-docker-containers-using-rti-connext-dds-and-shared-memory)"
msgstr "[使用DDS和共享内存在两个Docker容器之间通信](https://community.rti.com/kb/communicate-between-two-docker-containers-using-rti-connext-dds-and-shared-memory)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:102
msgid "Enabling containers to communicate with one another and with the host machine using interprocess communication (IPC)"
msgstr "使用进程间通信（IPC）使容器之间和容器与主机机器之间进行通信"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:103
msgid "[Debugging programs running inside Docker containers, in production](https://nvartolomei.com/debugging-programs-running-inside-docker-containers--in-production/)"
msgstr "[在生产环境中调试运行在Docker容器中的程序](https://nvartolomei.com/debugging-programs-running-inside-docker-containers--in-production/)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:104
msgid "Using tools like strace, perf, gdb when debugging programs running inside containers"
msgstr "在调试运行在容器内的程序时使用strace、perf、gdb等工具"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:107
msgid "Using Dev Containers"
msgstr "使用 Dev Containers"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:109
msgid "Once the dev container has been created and setup completed, VS Code will open a new workspace directly from the project's root directory, which itself is mounted within the source directory in the overlay colcon workspace. From here you can build, test, and debug the project as you normally would, with the added benefit of having the project's dependencies, intellisense, linters, and other extensions pre-configured and ready to use. Simply open a new terminal (Crtl+Shift+`), cd to the root of the colcon workspace, and run the usual colcon commands."
msgstr "一旦开发容器被创建并设置完成，VS Code将直接从项目的根目录打开一个新的工作区，该工作区本身在覆盖colcon工作空间中的源目录中挂载。从这里，您可以像通常一样构建、测试和调试项目，同时还可以享受项目的依赖项、智能感知、代码检查器和其他扩展的预配置和准备就绪。只需打开一个新的终端（Ctrl+Shift+`），cd到colcon工作空间的根目录，然后运行常规的colcon命令。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:112
msgid "You can incorporate the same scripts used by the `devcontainer.json` config file to further automate your local development workflow."
msgstr "您可以将与 `devcontainer.json` 配置文件相同的脚本纳入到您的本地开发工作流程中，以进一步自动化。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:115
msgid "Terminals"
msgstr "终端"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:117
msgid "If you prefer using an alternate terminal emulator, rather than the built-in VS Code terminal, you can open a separate shell session by simply using the Dev Container CLI or directly using the Docker CLI via the `exec` subcommands."
msgstr "如果您喜欢使用替代的终端模拟器，而不是内置的 VS Code 终端，您可以通过使用 Dev Container CLI 或直接使用 Docker CLI 的 `exec` 子命令来打开一个单独的 shell 会话。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:119
msgid "[Dev Container CLI](https://code.visualstudio.com/docs/devcontainers/devcontainer-cli)"
msgstr "[Dev Container CLI](https://code.visualstudio.com/docs/devcontainers/devcontainer-cli)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:120
msgid "`devcontainer exec --workspace-folder $NAV2_WS/src/navigation2 bash`"
msgstr "`devcontainer exec --workspace-folder $NAV2_WS/src/navigation2 bash`"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:121
msgid "[docker exec ](https://docs.docker.com/engine/reference/commandline/exec/)"
msgstr "[docker exec ](https://docs.docker.com/engine/reference/commandline/exec/)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:123
msgid "`docker exec -it <container-id> bash`"
msgstr "`docker exec -it <container-id> bash`"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:126
msgid "Shell sessions spawned directly via `docker exec` do not set the same environment that `devcontainer exec` does using `userEnvProbe`. Additional environment variables include `REMOTE_CONTAINERS_IPC`, `REMOTE_CONTAINERS_SOCKETS` and are used by vscode, ssh and X11."
msgstr "通过直接使用 `docker exec` 生成的 Shell 会话不会设置与使用 `userEnvProbe` 的 `devcontainer exec` 相同的环境。其他环境变量包括 `REMOTE_CONTAINERS_IPC`、`REMOTE_CONTAINERS_SOCKETS`，并且会被 vscode、ssh 和 X11 使用。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:131
msgid "The environment provided by `userEnvProbe` can be sourced manually. E.g. for the default `loginInteractiveShell` probe:"
msgstr "可以手动获取由 `userEnvProbe` 提供的环境。例如，默认的 `loginInteractiveShell` 探测器："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:140
msgid "Lifecycle"
msgstr "生命周期"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:142
msgid "While using the dev container, try and keep in mind the lifecycle of the container itself. Specifically, containers are ephemeral, meaning they are normally destroyed and recreated whenever the dev environment is rebuilt or updated. Subsequently, a best practice is to avoid storing any persistent data within the container, and instead utilize the project's source directory, or a separate mounted volume. When altering the development environment inside the container, try to remember to codify your changes into the Dockerfile, or the `devcontainer.json` config file, so that they can be easily reproduced and shared with others."
msgstr "在使用开发容器时，请记住容器本身的生命周期。具体来说，容器是暂时的，意味着它们通常在重建或更新开发环境时被销毁和重新创建。因此，最佳实践是避免在容器内存储任何持久数据，而是利用项目的源目录或单独的挂载卷。在容器内修改开发环境时，尽量记住将更改编码到 Dockerfile 或 `devcontainer.json` 配置文件中，以便轻松地复制和共享给他人。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:145
msgid "This is particularly important when the host machine is inherently ephemeral as well, as the case may be when using cloud based environments such as Codespaces, so be sure to commit and push local changes to a remote repository:"
msgstr "当主机机器本身是暂时性的时候，这一点尤其重要，比如在使用云环境（如 Codespaces）时，请务必提交并推送本地更改到远程存储库："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:147
msgid "[The codespace lifecycle](https://docs.github.com/en/codespaces/getting-started/the-codespace-lifecycle)"
msgstr "[代码空间生命周期](https://docs.github.com/en/codespaces/getting-started/the-codespace-lifecycle)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:148
msgid "Maintain your data throughout the entire codespace lifecycle"
msgstr "在整个 Codespace 生命周期中维护您的数据"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:151
msgid "Rebuilding"
msgstr "重建中"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:153
msgid "From time to time, you may need to rebuild the dev container, either because the base image, or `.devcontainer/` config was updated, or simply out of wanting a new fresh development environment. To do so, simply open the Command Palette (Ctrl+Shift+P) and select the `Remote-Containers: Rebuild Container` command."
msgstr "有时候，您可能需要重新构建开发容器，无论是因为基本镜像还是`.devcontainer/`配置文件的更新，或者仅仅是想要一个新的开发环境。要这样做，只需打开命令面板（Ctrl+Shift+P），然后选择`Remote-Containers: Rebuild Container`命令。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:156
msgid "Rebuilding the container will destroy any changes made to the container itself, such as installing additional packages, or modifying the environment. However, the project's source directory, and any mounted volumes, will remain unaffected."
msgstr "重建容器将会销毁对容器本身所做的任何更改，如安装附加软件包或修改环境。但项目的源目录和任何挂载的卷将保持不受影响。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:159
msgid "For example, you may need to rebuild the dev container when:"
msgstr "例如，当以下情况发生时，您可能需要重新构建开发容器："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:161
msgid "Pulling newer images from a container registry"
msgstr "从容器注册表拉取更新的镜像"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:162
msgid "specifically, image tags built `FROM` in the Dockerfile"
msgstr "具体而言，是在 Dockerfile 中构建的图像标签 `FROM`"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:163
msgid "or tags listed under `cacheFrom` in `devcontainer.json`"
msgstr "或在 `devcontainer.json` 中的 `cacheFrom` 下列出的标签"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:164
msgid "periodically done manually to ensure local environment reflects CI"
msgstr "定期手动执行以确保本地环境反映 CI"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:165
msgid "Updating the dev container configuration"
msgstr "更新开发容器配置"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:166
msgid "specifically when modifying dependent stages in the `Dockerfile`"
msgstr "具体而言，是在 `Dockerfile` 中修改依赖阶段时"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:167
msgid "or when modifying `./devcontainer` files and commands"
msgstr "或在修改 `./devcontainer` 文件和命令时"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:168
msgid "where build cache reuse correlates with severity of changes made"
msgstr "构建缓存重用与所做更改的严重程度相关"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:170
msgid "When necessary, you can also rebuild the container from scratch, e.i. without caching from docker, by selecting the `Remote-Containers: Rebuild Container Without Cache` command. This instead omits the `--cache-from` flag from the `docker buildx` command, while also adding the `--no-cache` and `--pull` flags to prevent caching from any existing image layers, using only the latest images from a container registry."
msgstr "如果需要，您还可以选择`Remote-Containers: Rebuild Container Without Cache`命令从头开始重新构建容器，即不使用docker缓存。这将从`docker buildx`命令中省略`--cache-from`标志，同时添加`--no-cache`和`--pull`标志，以防止使用任何现有镜像层的缓存，并仅使用容器注册表中的最新镜像。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:173
msgid "Rebuilding the container without cache may likely pull newer images from a container registry or install newer packages, as is common when developing for ROS 2 Rolling. You may then want to clean your overlay volume to avoid ABI incompatibilities or stale artifacts."
msgstr "重新构建容器时，可能会从容器注册表中拉取更新的镜像或安装更新的软件包，这在开发 ROS 2 Rolling 时很常见。然后，您可能需要清理覆盖卷，以避免ABI不兼容或过时的构件。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:176
msgid "Rebuilding without caching may be necessary when:"
msgstr "当需要重新构建而不使用缓存时可能需要这样做："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:178
msgid "Needing to update the base image"
msgstr "需要更新基础镜像"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:179
msgid "specifically if dev container configurations remain unmodified"
msgstr "特别是如果开发容器配置保持不变"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:180
msgid "to forcefully rerun a `RUN` directive in the Dockerfile"
msgstr "以强制重新运行 Dockerfile 中的 `RUN` 指令"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:181
msgid "such as unchanged `apt upgrade` or `rosdep update` commands"
msgstr "例如未更改的`apt upgrade`或`rosdep update`命令"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:183
msgid "Specifically, for this project, volumes remain unaffected by this rebuilding process: i.e. those used to mount the ccache directory or colcon workspace. While volume management is left to the user's discretion, other projects may of course handle this differently, so be sure to check the `./devcontainer` configuration to inspect how various container resources may be managed."
msgstr "具体而言，对于此项目，卷不受此重建过程的影响，例如用于挂载 ccache 目录或 colcon 工作区的卷。虽然卷的管理由用户自行决定，但其他项目可能会以不同的方式处理，因此请务必检查 `./devcontainer` 配置以了解如何管理各种容器资源。"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:186
msgid "Docker volume management can be done via the Docker CLI, or the VS Code Docker extension:"
msgstr "可以通过Docker CLI或VS Code Docker扩展来管理Docker卷："


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:188
msgid "[Docker Volume CLI](https://docs.docker.com/engine/reference/commandline/volume)"
msgstr "[Docker Volume CLI](https://docs.docker.com/engine/reference/commandline/volume)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:189
msgid "Manage volumes using subcommands to create, inspect, list, remove, or prune volumes"
msgstr "使用子命令来创建、检查、列出、删除或修剪卷"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:190
msgid "[VS Code Docker extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker)"
msgstr "[VS Code Docker 扩展](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker)"


#: ../../development_guides/devcontainer_docs/devcontainer_guide.md:191
msgid "Makes it easy to create, manage, and debug containerized applications"
msgstr "简化了容器化应用程序的创建、管理和调试"


#: ../../development_guides/devcontainer_docs/index.md:2
msgid "Dev Containers"
msgstr "开发容器"


#: ../../development_guides/devcontainer_docs/index.md:4
msgid "You can use dev containers to build the project if you prefer a streamlined setup experience. This means you can use the same tools and dependencies as the rest of the team, including our Continuous Integration (CI) workflows, without worrying about installing dependencies on your host machine. Additionally, using Dev Containers makes it simple to switch between local or remote development environments, such as GitHub Codespaces."
msgstr "如果您喜欢简化的设置体验，您可以使用开发容器构建项目。这意味着您可以使用与团队的其他成员相同的工具和依赖项，包括我们的持续集成（CI）工作流程，而无需担心在主机上安装依赖项。此外，使用开发容器可以轻松切换本地或远程开发环境，例如 GitHub Codespaces。"


#: ../../development_guides/devcontainer_docs/index.md:7
msgid "More info on Dev Containers can be found here:"
msgstr "有关开发容器的更多信息，请参阅此处："


#: ../../development_guides/devcontainer_docs/index.md:9
msgid "[Development Containers](https://containers.dev/)"
msgstr "[开发容器](https://containers.dev/)"


#: ../../development_guides/devcontainer_docs/index.md:10
msgid "An open specification for enriching containers with development specific content and settings"
msgstr "一个用于为容器提供开发特定内容和设置的开放规范"


#: ../../development_guides/devcontainer_docs/index.md:11
msgid "[Developing inside a Container](https://code.visualstudio.com/docs/remote/containers)"
msgstr "[在容器内开发](https://code.visualstudio.com/docs/remote/containers)"


#: ../../development_guides/devcontainer_docs/index.md:12
msgid "Learn how to use Visual Studio Code to develop inside a Docker container"
msgstr "学习如何使用Visual Studio Code在Docker容器中进行开发"


#: ../../development_guides/devcontainer_docs/index.md:13
msgid "[GitHub Codespaces overview](https://docs.github.com/en/codespaces/overview)"
msgstr "[GitHub Codespaces 概述](https://docs.github.com/en/codespaces/overview)"


#: ../../development_guides/devcontainer_docs/index.md:14
msgid "A development environment hosted in the cloud"
msgstr "一个托管在云端的开发环境"


#: ../../development_guides/devcontainer_docs/index.md:24
msgid "What, Why, How?"
msgstr "什么、为什么、如何?"


#: ../../development_guides/devcontainer_docs/index.md:26
msgid "Lets briefly explain what dev containers are, why you should use them, and how they work."
msgstr "让我们简要解释一下开发容器是什么，为什么应该使用它们以及它们的工作原理"


#: ../../development_guides/devcontainer_docs/index.md:29
msgid "Here we'll assume the use of VS Code, but still applies to alternative tools and services, including  other CLIs, IDEs, etc. such as:"
msgstr "在这里，我们将假设使用VS Code，但同样适用于其他工具和服务，包括其他CLI、IDE等，比如:"


#: ../../development_guides/devcontainer_docs/index.md:31
msgid "[Dev Container CLI](https://github.com/devcontainers/cli)"
msgstr "[Dev Container CLI](https://github.com/devcontainers/cli)"


#: ../../development_guides/devcontainer_docs/index.md:32
msgid "A reference implementation for the open specification"
msgstr "对于开放规范的参考实现"


#: ../../development_guides/devcontainer_docs/index.md:33
msgid "[JetBrains Space | Develop in Dev Environment](https://www.jetbrains.com/help/space/develop-in-a-dev-environment.html)"
msgstr "[JetBrains Space | Develop in Dev Environment](https://www.jetbrains.com/help/space/develop-in-a-dev-environment.html)"


#: ../../development_guides/devcontainer_docs/index.md:34
msgid "Using Dev Containers with JetBrain based products"
msgstr "使用JetBrain的产品与Dev Containers"


#: ../../development_guides/devcontainer_docs/index.md:35
msgid "[Supporting tools](https://containers.dev/supporting)"
msgstr "[支持工具](https://containers.dev/supporting)"


#: ../../development_guides/devcontainer_docs/index.md:36
msgid "List of tools and services supporting the development container specification"
msgstr "支持开发容器规范的工具和服务列表"


#: ../../development_guides/devcontainer_docs/index.md:39
msgid "What is a Dev Container?"
msgstr "什么是开发容器？"


#: ../../development_guides/devcontainer_docs/index.md:41
msgid "A dev container is a Docker container that has all the tools and dependencies you need to develop the project. It runs in a self-contained environment and is isolated from other containers and your host machine. This lets you reliably develop for the project anywhere, notably for linux distributions targeted by ROS, regardless of your host machine's operating system."
msgstr "Dev容器是一个包含开发项目所需工具和依赖的Docker容器。它在一个自包含的环境中运行，并与其他容器和主机机器隔离开来。这使得您可以在任何地方可靠地为项目进行开发，特别是针对ROS的Linux发行版，而不受主机机器操作系统的影响。"


#: ../../development_guides/devcontainer_docs/index.md:43
msgid "Why use a Dev Container?"
msgstr "为什么要使用开发容器？"


#: ../../development_guides/devcontainer_docs/index.md:45
msgid "A dev container provides a common and consistent development environment. It ensures that everyone on the team is using the same tools and dependencies. It also makes it easy to switch between projects because each project can use a different container. This is especially useful if you work on multiple projects that use different versions of the same tools and dependencies, such as different versions of ROS."
msgstr "Dev容器提供了一个共享和一致的开发环境。它确保团队中的每个人都使用相同的工具和依赖项。它还可以轻松切换项目，因为每个项目可以使用不同的容器。如果您同时在多个项目上工作，并且这些项目使用不同版本的相同工具和依赖项（如不同版本的ROS），这将特别有用。"


#: ../../development_guides/devcontainer_docs/index.md:47
msgid "How do Dev Containers work?"
msgstr "开发容器是如何工作的？"


#: ../../development_guides/devcontainer_docs/index.md:49
msgid "When you open the project in VS Code, VS Code checks for the dev container configuration nested within the `.devcontainer` folder under the project's root directory. If it finds one, it can prompt you to reopen the project in a container. If you choose to do so, it launches the container, connects to it, and mounts your project folder inside the container. You can then use VS Code in the container just as you would locally. While setting up the container, VS Code can also attempt to passthrough useful aspects of your local environment, such as git user configurations, X11 sockets, and more."
msgstr "当您在VS Code中打开项目时，VS Code会检查项目根目录下的`.devcontainer`文件夹中嵌套的Dev容器配置。如果找到了配置文件，它可以提示您在容器中重新打开项目。如果您选择这样做，它会启动容器，连接到容器，并将您的项目文件夹挂载到容器内。然后，您可以像在本地一样在容器中使用VS Code。在设置容器时，VS Code还可以尝试传递本地环境的一些有用方面，例如git用户配置、X11套接字等。"


#: ../../development_guides/devcontainer_docs/index.md:51
msgid "This is quite similar to earlier tools used to customize and run docker containers for development:"
msgstr "这与早期用于定制和运行Docker容器的工具非常相似："


#: ../../development_guides/devcontainer_docs/index.md:53
msgid "[rocker | ROS + Docker](https://github.com/osrf/rocker)"
msgstr "[rocker | ROS + Docker](https://github.com/osrf/rocker)"


#: ../../development_guides/devcontainer_docs/index.md:54
msgid "A tool to run docker containers with overlays and convenient options for things like GUIs etc."
msgstr "一种运行带有叠加层和便捷选项（如图形界面等）的Docker容器的工具。"


#: ../../development_guides/devcontainer_docs/index.md:55
msgid "Developed by [Open Robotics](https://www.openrobotics.org/)"
msgstr "由[Open Robotics](https://www.openrobotics.org/)开发"


#: ../../development_guides/devcontainer_docs/index.md:56
msgid "[ADE Development Environment](https://ade-cli.readthedocs.io/en/latest/)"
msgstr "[ADE开发环境](https://ade-cli.readthedocs.io/en/latest/)"


#: ../../development_guides/devcontainer_docs/index.md:57
msgid "A modular Docker-based tool to ensure developers have a common, consistent development environment"
msgstr "一个基于Docker的模块化工具，确保开发者拥有一个共同、一致的开发环境"


#: ../../development_guides/devcontainer_docs/index.md:58
msgid "Developed by [Apex.AI](https://www.apex.ai/)"
msgstr "由[Apex.AI](https://www.apex.ai/)开发"


#: ../../development_guides/devcontainer_docs/index.md:60
msgid "Prerequisites"
msgstr "前提条件"


#: ../../development_guides/devcontainer_docs/index.md:62
msgid "To use dev containers, you'll need the following:"
msgstr "要使用开发容器，您需要以下内容："


#: ../../development_guides/devcontainer_docs/index.md:64
msgid "[Docker Engine](https://docs.docker.com/engine/install/) installed and running on the host machine"
msgstr "[Docker Engine](https://docs.docker.com/engine/install/) 已安装并在主机上运行"


#: ../../development_guides/devcontainer_docs/index.md:65
msgid "[Visual Studio Code](https://code.visualstudio.com/) installed on any remote machine"
msgstr "[Visual Studio Code](https://code.visualstudio.com/) 安装在任何远程机器上"


#: ../../development_guides/devcontainer_docs/index.md:66
msgid "[Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension installed in VS Code"
msgstr "在 VS Code 中安装了 [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) 扩展"


#: ../../development_guides/devcontainer_docs/index.md:69
msgid "Alternatively, you could use GitHub Codespaces directly from the project repo, or any other remote host machine:"
msgstr "或者，您可以直接从项目仓库或任何其他远程主机上使用GitHub Codespaces："


#: ../../development_guides/devcontainer_docs/index.md:71
msgid "[Creating a codespace for a repository](https://docs.github.com/en/codespaces/developing-in-codespaces/creating-a-codespace-for-a-repository?tool=webui)"
msgstr "在[创建用于存储库的 codespace](https://docs.github.com/en/codespaces/developing-in-codespaces/creating-a-codespace-for-a-repository?tool=webui)"


#: ../../development_guides/devcontainer_docs/index.md:72
msgid "How to create a codespace for repository via GitHub CLI, VS Code, or Web browser"
msgstr "如何通过GitHub CLI、VS Code或Web浏览器为存储库创建一个codespace"


#: ../../development_guides/devcontainer_docs/index.md:73
msgid "[Develop on a remote Docker host](https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host)"
msgstr "[在远程 Docker 主机上开发](https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host)"


#: ../../development_guides/devcontainer_docs/index.md:74
msgid "How to connect VS Code to a remote Docker host using SSH tunnels or TCP sockets"
msgstr "如何使用SSH隧道或TCP套接字将VS Code连接到远程Docker主机"


#: ../../development_guides/devcontainer_docs/index.md:77
msgid "Getting started"
msgstr "入门"


#: ../../development_guides/devcontainer_docs/index.md:79
msgid "Getting started using dev containers is as simple as opening the project in VS Code by either: following the notification prompt to reopen the project in a container, or explicitly opening the command palette (Crtl+Shift+P) and selecting `Remote-Containers: Reopen in Container`. This will create a new container, install any extensions specified in the project's default `.devcontainer/devcontainer.json` config file, and mount the project's root directory as the workspace folder. Once the container is created, VS Code will connect to it and you can start developing."
msgstr "使用开发容器的入门方法就是通过以下方式在VS Code中打开项目：要么按照通知提示重新打开容器中的项目，要么显式地打开命令面板（Crtl+Shift+P），然后选择 `Remote-Containers: Reopen in Container`。这将创建一个新的容器，在项目的默认 `.devcontainer/devcontainer.json` 配置文件中安装指定的扩展，并将项目的根目录挂载为工作区文件夹。容器创建完成后，VS Code将连接到容器，您可以开始开发。"


#: ../../development_guides/devcontainer_docs/index.md:82
msgid "Clicking the `Starting Dev Container (show log)` notification in VS Code allows you to observe in live time how the sausage is made, while typing `Dev Containers: Show Log` into the command palette will list all the available commands to review and revisit these log files later."
msgstr "在 VS Code 中单击`启动 Dev Container (显示日志)`通知，可以实时观察制作过程，同时在命令面板中输入`Dev Containers: Show Log`将列出所有可用的命令以供查看和重新访问这些日志文件。"


#: ../../development_guides/devcontainer_docs/index.md:85
msgid "While waiting for the initial setup, feel free to stretch your legs, grab a coffee, or continue to read the following guides to learn more about creating and using dev containers, or how to visualize and leverage graphical user interfaces from a headless development environment."
msgstr "在等待初始设置的同时，可以随意活动一下，喝杯咖啡，或者继续阅读以下指南，了解有关创建和使用开发容器，或如何从无头开发环境中可视化和利用图形用户界面的更多信息。"


#: ../../development_guides/devcontainer_docs/index.md:87
msgid "**[](devcontainer_guide.md)**"
msgstr "**[](devcontainer_guide.md)**"


#: ../../development_guides/devcontainer_docs/index.md:88
msgid "How to develop Nav2 using dev containers and supporting tools"
msgstr "如何使用开发容器和支持工具开发Nav2"


#: ../../development_guides/devcontainer_docs/index.md:90
msgid "Security"
msgstr "安全性"


#: ../../development_guides/devcontainer_docs/index.md:93
msgid "Ensure you trust the authors and contents of workspaces before launching derived dev containers."
msgstr "在启动衍生的开发容器之前，请确保信任工作区的作者和内容。"


#: ../../development_guides/devcontainer_docs/index.md:96
msgid "A word of caution when using dev containers: they are powerful tools, but can be a security concern, as the capability of arbitrary code execution facilitated by IDE extensions to enable such automation and convenience remains inherently dual use. Before launching a dev container, ensure you trust the workspaces and authors. For example, when reviewing a pull request, verify patches remain benign and do not introduce any malicious code. Although such vigilance is merited whenever compiling and running patched code, using containers with either elevated privileges or filesystem access renders this diligence even more prudent."
msgstr "在使用开发容器时需要谨慎：它们是强大的工具，但可能存在安全问题，因为由IDE扩展实现的任意代码执行功能为自动化和便利性提供了双重用途。在启动开发容器之前，请确保信任工作区和作者。例如，在审查拉取请求时，请验证补丁是否仍然是良性的，不会引入任何恶意代码。尽管在编译和运行修补代码时需要保持警惕，但使用具有提升权限或文件系统访问权限的容器则需要更加谨慎。"


#: ../../development_guides/devcontainer_docs/index.md:99
msgid "More info on trusting workspaces and extensions in general can be found here:"
msgstr "有关信任工作区和扩展的更多信息可以在此处找到："


#: ../../development_guides/devcontainer_docs/index.md:101
msgid "[Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust)"
msgstr "[Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust)"


#: ../../development_guides/devcontainer_docs/index.md:102
msgid "VS Code user guid on trusting and configure workspaces"
msgstr "VS Code用户指南：信任和配置工作区"


#: ../../development_guides/index.rst:4
msgid "Development Guides"
msgstr "开发指南"


#: ../../development_guides/index.rst:6
msgid "This section includes guides for developing Nav2, e.g. how to build from source, how to use dev containers, and how to get involved."
msgstr "本部分包含开发Nav2的指南，例如如何从源代码构建，如何使用开发容器以及如何参与其中。"


#: ../../development_guides/involvement_docs/index.rst:4 ../../development_guides/involvement_docs/index.rst:16
msgid "Getting Involved"
msgstr "参与进来"


#: ../../development_guides/involvement_docs/index.rst:6
msgid "As an open-source project, we welcome and encourage the community to submit patches directly to the |LPN|.  In our collaborative open source environment, standards and methods for submitting changes help reduce the chaos that can result from an active development community."
msgstr "作为一个开源项目，我们欢迎并鼓励社区直接向|LPN|提交补丁。在我们的协作开源环境中，提交更改的标准和方法有助于减少活跃开发社区可能导致的混乱。"


#: ../../development_guides/involvement_docs/index.rst:11
msgid "This document explains how to participate in project conversations, log and track bugs and enhancement requests, and submit patches to the project so your patch will be accepted quickly in the codebase."
msgstr "本文档说明了如何参与项目讨论，记录和跟踪错误和改进请求，并向项目提交补丁，以便快速将您的补丁接受到代码库中。"


#: ../../development_guides/involvement_docs/index.rst:18
msgid "If you're interested in getting involved in Navigation 2, first of all, welcome! We encourage everyone to get involved from students, to junior developers, to senior developers, and executives. There's something to do for everyone from bug fixes, to feature development, new algorithms, and refactoring."
msgstr "如果您有兴趣参与Navigation 2，首先，欢迎您！我们鼓励各个层次的人员参与，包括学生、初级开发者、高级开发者和管理人员。无论是修复错误、开发新功能、设计新算法还是重构代码，每个人都可以找到适合自己的任务。"


#, python-format
msgid "All ROS 2 TSC Working Groups have their meetings on the `working group calendar <https://calendar.google.com/calendar/embed?src=agf3kajirket8khktupm9go748%40group.calendar.google.com>`_. Here, you can find the date and time of the Navigation2 working group meeting. Make sure you're checking in your local timezone. From this calendar, you can add yourself to the event so it will appear on your google calendar and get the event link to the call through Google Hangouts. We encourage everyone interested to come to the meeting to introduce yourself, your project, and see what everyone is working on."
msgstr "所有ROS 2 TSC工作组都在`工作组日历<https://calendar.google.com/calendar/embed?src=agf3kajirket8khktupm9go748%40group.calendar.google.com>`_上进行会议。在这里，您可以找到Navigation2工作组会议的日期和时间。请确保按照您所在的本地时区进行检查。通过该日历，您可以将自己添加到事件中，以便在您的Google日历上显示，并通过Google Hangouts获取通话的事件链接。我们鼓励所有感兴趣的人参加会议，介绍自己、您的项目，并了解其他人正在做什么。"


#: ../../development_guides/involvement_docs/index.rst:27
msgid "Further, `ROS Discourse <https://discourse.ros.org/>`_ is a good place to follow larger discussions happening in the community and announcements. This is **not** the correct place to post questions or ask for assistance. Please visit `ROS Answers <https://answers.ros.org/>`_ for Q&A."
msgstr "此外，`ROS Discourse <https://discourse.ros.org/>`_ 是一个跟进社区中的大型讨论和公告的好地方。但**不是**提问或寻求帮助的正确地点。请访问 `ROS Answers <https://answers.ros.org/>`_ 进行问答。"


#: ../../development_guides/involvement_docs/index.rst:29
msgid "Lastly, we have a `Community Slack <https://join.slack.com/t/navigation2/shared_invite/zt-uj428p0x-jKx8U7OzK1IOWp5TnDS2rA>`_ where we chat in real-time about topics in public channels or sidebar maintainers on individual projects via PMs. If you're interested in contributing to Nav2, this is a great place to join!"
msgstr "最后，我们有一个`Community Slack <https://join.slack.com/t/navigation2/shared_invite/zt-uj428p0x-jKx8U7OzK1IOWp5TnDS2rA>`_，在这里我们可以通过公共频道实时交流，或者通过私信与侧边栏维护者在各个项目上进行交流。如果您有兴趣为Nav2做出贡献，这是一个很好的加入地点！"


#: ../../development_guides/involvement_docs/index.rst:31
msgid "If you're looking to contribute code or bugs, please see the Process section below."
msgstr "如果您想贡献代码或报告错误，请参考下面的过程部分。"


#: ../../development_guides/involvement_docs/index.rst:33
msgid "Over time, for developers that have an interest and have shown technical competence in an area of the stack, we elevate developers to a maintainers status. That allows push rights to our protected branches, first-reviewers rights, and getting your name on :ref:`about`. There currently is not a clear process for getting to be a maintainer, but if you've been involved and contributing over a duration of several months, you may be a good candidate and should email the project lead listed on :ref:`about`."
msgstr "随着时间的推移，对于对堆栈的某个领域表现出兴趣和技术能力的开发人员，我们将其提升为维护者的身份。这样可以获得对我们受保护的分支的推送权限、第一审核者权限，并将您的名字添加到 :ref:`about` 中。目前还没有明确的成为维护者的流程，但是如果您在数月的时间内一直参与并做出贡献，您可能是一个合适的候选人，并且应该发送电子邮件给 :ref:`about` 中列出的项目负责人。"


#: ../../development_guides/involvement_docs/index.rst:38
msgid "Process"
msgstr "过程"


#: ../../development_guides/involvement_docs/index.rst:40
msgid "After you've introduced yourself in a working group meeting (recommended, not required), you're ready to get started! We recommend a typical open-source project flow and value detail and transparency. If you commit to something and need to pull back, say so. We all know priorities change and appreciate the heads up so that task can go into the open queue of tasks."
msgstr "在工作组会议中介绍自己之后（推荐但不是必需的），您就可以开始了！我们建议采用典型的开源项目流程，并重视细节和透明度。如果您承诺了某件事并且需要撤回，要说出来。我们都知道优先级会发生变化，我们也很感谢您提前告知，以便该任务可以放入开放的任务队列。"


#: ../../development_guides/involvement_docs/index.rst:45
msgid "The process is simple and is as follow:"
msgstr "该过程简单明了，如下所示："


#: ../../development_guides/involvement_docs/index.rst:47
msgid "Create a ticket for any issues or features you'd like to see. You are not required to fix / implement patches required, but it would be helpful. Reporting bugs is also a valuable contribution."
msgstr "创建一个问题票，列出您想要看到的任何问题或功能。您不必修复/实现所需的补丁，但这将非常有帮助。报告错误也是有价值的贡献。"


#: ../../development_guides/involvement_docs/index.rst:49
msgid "If this ticket, or another existing ticket, is something you would like to work on, comment in the ticket claiming ownership over it. It would be helpful at this time if you declared a strategy and a timeline for planning purposes of other folks working around you. Over time, update the ticket with progress of key markers and engage in any constructive feedback maintainers or other users may have."
msgstr "如果您希望处理这个问题，或者是其他已存在的问题，请在问题中评论声明您对其的拥有权。同时，为了其他协作人员的计划安排，宣布您的策略和时间表将非常有帮助。随着时间的推移，更新问题的进展，与维护人员或其他用户进行建设性的反馈交流。"


#: ../../development_guides/involvement_docs/index.rst:51
msgid "Once you've completed the task you set out to complete, submit a PR! Please fill out the PR template in complete to ensure that we have a full understanding of your work. At that point, 1-2 reviewers will take a look at your work and give it some feedback to be merged into the codebase. For trivial changes, a single maintainer may merge it after review if they're happy with it, up to their discretion. Any substantial changes should be approved by at least 1 maintainer and 1 other community member."
msgstr "完成您设定的任务后，提交一个 PR！请填写完整的 PR 模板，以确保我们对您的工作有全面的了解。此时，1-2 位审查者将查看您的工作并提供一些反馈，以便将其合并到代码库中。对于微小的更改，如果单个维护者对其满意，他们可以在审核后直接合并，视情况而定。任何重大的更改都应该得到至少1个维护者和1个其他社区成员的批准。"


#: ../../development_guides/involvement_docs/index.rst:53
msgid "Note: We take code quality seriously and strive for high-quality and consistent code. We make use of the linting and static analysis tools provided in ROS 2 (``ament_cpplint``, ``ament_uncrustify``, ``ament_cppcheck``, etc). All PRs are built in CI with the appropriate ROS distributions and run through a set of unit and system level tests including static analysis. You can see the results of these tests in the pull request. It is expected for feature development for tests to cover this work to be added. If any documentation must be updated due to your changes, that should be included in your pull request."
msgstr "注意：我们非常重视代码质量，并追求高质量和一致的代码。我们使用ROS 2中提供的代码检查和静态分析工具（``ament_cpplint``、``ament_uncrustify``、``ament_cppcheck``等）。所有的PR都会在CI中构建，并通过一组单元测试和系统级测试，包括静态分析。您可以在pull request中看到这些测试的结果。我们期望对于功能开发，测试工作也要进行相应的覆盖。如果您的更改需要更新文档，请在pull request中包含相应的更新。"


#: ../../development_guides/involvement_docs/index.rst:61
msgid "Licensing"
msgstr "许可证"


#: ../../development_guides/involvement_docs/index.rst:63
msgid "Licensing is very important to open source projects. It helps ensure the software continues to be available under the terms that the author desired."
msgstr "开源项目非常重视许可证。它有助于确保软件在作者所期望的条款下继续可用。"


#: ../../development_guides/involvement_docs/index.rst:67
msgid "Because much of the source code is ported from other ROS 1 projects, each package has it's own license. Contributions should be made under the predominant license of that package. Entirely new packages should be made available under the `Apache 2.0 license <https://www.apache.org/licenses/LICENSE-2.0>`_."
msgstr "由于许多源代码是从其他ROS 1项目移植过来的，每个软件包都有自己的许可证。贡献应该在该软件包的主要许可证下进行。全新"


#: ../../development_guides/involvement_docs/index.rst:72
msgid "A license tells you what rights you have as a developer, as provided by the copyright holder. It is important that the contributor fully understands the licensing rights and agrees to them. Sometimes the copyright holder isn't the contributor, such as when the contributor is doing work on behalf of a company."
msgstr "许可证告诉开发者作为版权持有人提供的权利。重要的是，贡献者完全了解许可权并同意它们。有时版权持有人并非贡献者本人，比如当贡献者代表公司工作时。"


#: ../../development_guides/involvement_docs/index.rst:78
msgid "If for some reason Apache 2.0 or BSD licenses are not appropriate for your work, please get in contact with a project maintainer and discuss your concerns or requirements. We may consider special exceptions for exceptional work, within reason (we will not accept any licenses that makes it unsuitable for commercial use)."
msgstr "If for some reason Apache 2.0 or BSD licenses are not appropriate for your work, please get in contact with a project maintainer and discuss your concerns or requirements. We may consider special exceptions for exceptional work, within reason (we will not accept any licenses that makes it unsuitable for commercial use)."


#: ../../development_guides/involvement_docs/index.rst:84
msgid "Developer Certification of Origin (DCO)"
msgstr "开发者原产地认证（DCO）"


#: ../../development_guides/involvement_docs/index.rst:86
msgid "To make a good faith effort to ensure licensing criteria are met, |LPN| encourages the Developer Certificate of Origin (DCO) process to be followed."
msgstr "To make a good faith effort to ensure licensing criteria are met, |LPN| encourages the Developer Certificate of Origin (DCO) process to be followed."


#: ../../development_guides/involvement_docs/index.rst:90
msgid "The DCO is an attestation attached to every contribution made by a developer. In the commit message of the contribution, (described more fully later in this document), the developer simply adds a ``Signed-off-by`` statement and thereby agrees to the DCO."
msgstr "DCO 是开发者在每次贡献中附加的证明。在贡献的提交信息中（稍后在本文档中更详细地描述），开发者只需添加一个“已签署”（Signed-off-by）声明，即表示同意 DCO。"


#: ../../development_guides/involvement_docs/index.rst:95
msgid "In practice, its easier to just ``git commit -s -m \"commit messsage.\"``. Where ``-s`` adds this automatically. If you forgot to add this to a commit, it is easy to append via: ``git commit --amend -s``."
msgstr "In practice, its easier to just ``git commit -s -m \"commit messsage.\"``. Where ``-s`` adds this automatically. If you forgot to add this to a commit, it is easy to append via: ``git commit --amend -s``."


#: ../../development_guides/involvement_docs/index.rst:99
msgid "When a developer submits a patch, it is a commitment that the contributor has the right to submit the patch per the license.  The DCO agreement is shown below and at http://developercertificate.org/."
msgstr "当开发者提交补丁时，这意味着贡献者有权根据许可证提交补丁。下面是 DCO 协议的内容，也可以在 http://developercertificate.org/ 上查看。"

